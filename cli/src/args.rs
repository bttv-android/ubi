use clap::Parser;

#[derive(Parser, Debug)]
#[clap(author, version, about, long_about = None)]
pub struct Args {
    #[clap(long)]
    pub baksmali_path: String,

    #[clap(long)]
    pub dx_path: String,

    #[clap(long, help = "Path to aar file that is generated by compiling your mocks")]
    pub mock_aar: String,

    #[clap(long, help = "Path to the directory that was generated by apktool. It contains the smali files to compare against.")]
    pub disass: String,

    #[clap(long, help = "Ignore all diffs caused by a Constructor with no parameters (which is auto-generated by javac).")]
    pub ignore_default_constructors: bool,

    #[clap(long)]
    pub ignore_object_super: bool,
}

pub fn parse() -> Args {
    let args = Args::parse();
    debug!("args: {:#?}", args);
    return args;
}
