use crate::VERSION;
use clap::App;
use clap::Arg;
use ubi_core::{
    ubignore::{parse_ubignore, UbiIgnore},
    UbiArgs,
};

pub fn parse_args() -> UbiArgs {
    let matches = get_clap_app().get_matches();

    UbiArgs {
        baksmali_path: matches.value_of("BAKSMALI_PATH").unwrap().to_string(),
        dx_path: matches.value_of("DX_PATH").unwrap().to_string(),
        mod_dir: matches.value_of("MOD_DIR").unwrap().to_string(),
        disass_dir: matches.value_of("DISASS_DIR").unwrap().to_string(),
        no_diff: matches.is_present("no-diff"),
        ignore_default_constructors: matches.is_present("ignore-default-constructors"),
        ignore_object_super: matches.is_present("ignore-object-super"),
        ubignore: get_ubignore(),
    }
}

fn get_ubignore() -> Option<UbiIgnore> {
    let cwd = get_cwd()?;
    let ubignore_path = cwd.join(".ubignore");

    let content = std::fs::read_to_string(ubignore_path);

    if content.is_err() {
        let err = content.unwrap_err();
        if err.kind() == std::io::ErrorKind::NotFound {
            return None;
        }
        warn!("Could not read .ubignore file: {:?}", err);
        return None;
    }

    let content = content.unwrap();

    let ubignore = parse_ubignore(content);

    if ubignore.is_err() {
        error!(".ubignore could not be parsed: {:?}", ubignore.unwrap_err());
        std::process::exit(1);
    }

    return Some(ubignore.unwrap());
}

fn get_cwd() -> Option<std::path::PathBuf> {
    let cwd = std::env::current_dir();

    if cwd.is_err() {
        warn!(
            "Could not get current working directory: {:?}",
            cwd.unwrap_err()
        );
        return None;
    }

    return Some(cwd.unwrap());
}

fn get_clap_app() -> App<'static, 'static> {
    App::new("bttv-android/ubi")
        .version(VERSION)
        .arg(
            Arg::with_name("BAKSMALI_PATH")
                .help("Path to the baksmali utilty")
                .required(true),
        )
        .arg(
            Arg::with_name("DX_PATH")
                .help("Path to the DX utilty")
                .required(true),
        )
        .arg(
            Arg::with_name("MOD_DIR")
                .help("Directory that contains the Java source you want to compare")
                .required(true),
        )
        .arg(
            Arg::with_name("DISASS_DIR")
                .help("Directory that contains the smali files you want to compare against")
                .required(true),
        )
        .arg(
            Arg::with_name("no-diff")
                .long("no-diff")
                .help("Do not operate on only changed files"),
        )
        .arg(
          Arg::with_name("ignore-default-constructors")
              .long("ignore-default-constructors")
              .help("Ignore all diffs caused by a Constructor with no parameters (which is auto-generated by Java)."),
        )
        .arg(
          Arg::with_name("ignore-object-super")
              .long("ignore-object-super")
              .help("Ignore all diffs caused by incorrect inheritance."),
        )
}
