use crate::VERSION;
use clap::App;
use clap::Arg;

#[derive(Debug)]
pub struct UbiArgs {
    pub baksmali_path: String,
    pub dx_path: String,
    pub mod_dir: String,
    pub disass_dir: String,
    pub no_diff: bool,
    pub ignore_default_constructors: bool,
    pub ignore_object_super: bool,
}

pub fn parse_args() -> UbiArgs {
    let matches = get_clap_app().get_matches();

    UbiArgs {
        baksmali_path: matches.value_of("BAKSMALI_PATH").unwrap().to_string(),
        dx_path: matches.value_of("DX_PATH").unwrap().to_string(),
        mod_dir: matches.value_of("MOD_DIR").unwrap().to_string(),
        disass_dir: matches.value_of("DISASS_DIR").unwrap().to_string(),
        no_diff: matches.is_present("no-diff"),
        ignore_default_constructors: matches.is_present("ignore-default-constructors"),
        ignore_object_super: matches.is_present("ignore-object-super"),
    }
}

fn get_clap_app() -> App<'static, 'static> {
    App::new("bttv-android/ubi")
        .version(VERSION)
        .arg(
            Arg::with_name("BAKSMALI_PATH")
                .help("Path to the baksmali utilty")
                .required(true),
        )
        .arg(
            Arg::with_name("DX_PATH")
                .help("Path to the DX utilty")
                .required(true),
        )
        .arg(
            Arg::with_name("MOD_DIR")
                .help("Directory that contains the Java source you want to compare")
                .required(true),
        )
        .arg(
            Arg::with_name("DISASS_DIR")
                .help("Directory that contains the smali files you want to compare against")
                .required(true),
        )
        .arg(
            Arg::with_name("no-diff")
                .long("no-diff")
                .help("Do not operate on only changed files"),
        )
        .arg(
          Arg::with_name("ignore-default-constructors")
              .long("ignore-default-constructors")
              .help("Ignore all diffs caused by a Constructor with no parameters (which is auto-generated by Java)."),
        )
        .arg(
          Arg::with_name("ignore-object-super")
              .long("ignore-object-super")
              .help("Ignore all diffs caused by incorrect inheritance."),
        )
}
